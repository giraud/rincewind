Ident.t => t = { stamp: int; name: string; mutable flags: int }

lexing.ml
type position = {
  pos_fname : string;
  pos_lnum : int;  line number
  pos_bol : int;   beginnig of line
  pos_cnum : int;  column number
}

location.ml
Location.t = { loc_start: position; loc_end: position; loc_ghost: bool }

type pattern = {
    pat_desc: pattern_desc;
    pat_loc: Location.t;
    pat_extra : (pat_extra * Location.t * attribute list) list;
    pat_type: type_expr;
    mutable pat_env: Env.t;
    pat_attributes: attribute list;
}

type pattern_desc =
    Tpat_any
  | Tpat_var of Ident.t * string loc
  | Tpat_alias of pattern * Ident.t * string loc
  | Tpat_constant of constant
  | Tpat_tuple of pattern list
  | Tpat_construct of
      Longident.t loc * constructor_description * pattern list
  | Tpat_variant of label * pattern option * row_desc ref
  | Tpat_record of
      (Longident.t loc * label_description * pattern) list *
        closed_flag
  | Tpat_array of pattern list
  | Tpat_or of pattern * pattern * row_desc option
  | Tpat_lazy of pattern

typedtree.ml
value_binding = {
    vb_pat: pattern;
    vb_expr: expression;
    vb_attributes: attributes;
    vb_loc: Location.t;
}

module_binding = {
     mb_id: Ident.t;
     mb_name: string loc;
     mb_expr: module_expr;
     mb_attributes: attribute list;
     mb_loc: Location.t;
}

module_expr = {
    mod_desc: module_expr_desc;
    mod_loc: Location.t;
    mod_type: Types.module_type;
    mod_env: Env.t;
    mod_attributes: attribute list;
}

module_expr_desc =
    Tmod_ident of Path.t * Longident.t loc
  | Tmod_structure of structure
  | Tmod_functor of Ident.t * string loc * module_type option * module_expr
  | Tmod_apply of module_expr * module_expr * module_coercion
  | Tmod_constraint of
      module_expr * Types.module_type * module_type_constraint * module_coercion
  | Tmod_unpack of expression * Types.module_type
}

typedtree.ml
structure_item_desc =
    Tstr_eval of expression * attributes
  | Tstr_value of rec_flag * value_binding list
  | Tstr_primitive of value_description
  | Tstr_type of type_declaration list
  | Tstr_typext of type_extension
  | Tstr_exception of extension_constructor
  | Tstr_module of module_binding
  | Tstr_recmodule of module_binding list
  | Tstr_modtype of module_type_declaration
  | Tstr_open of open_description
  | Tstr_class of (class_declaration * string list * virtual_flag) list
  | Tstr_class_type of (Ident.t * string loc * class_type_declaration) list
  | Tstr_include of include_declaration
  | Tstr_attribute of attribute

typedtree.ml
structure_item = {
    str_desc : structure_item_desc;
    str_loc  : Location.t;
    str_env  : Env.t
}

typedtree.ml
structure = {
  str_items : structure_item list;
  str_type : Types.signature;
  str_final_env : Env.t;
}

binary_annots =
  | Packed of Types.signature * string list
  | Implementation of structure
  | Interface of signature
  | Partial_implementation of binary_part array
  | Partial_interface of binary_part array

type cmt_infos = {
  cmt_modname            : string;
  cmt_annots             : binary_annots;
  cmt_value_dependencies : (Types.value_description * Types.value_description) list;
  cmt_comments           : (string * Location.t) list;
  cmt_args               : string array;
  cmt_sourcefile         : string option;
  cmt_builddir           : string;
  cmt_loadpath           : string list;
  cmt_source_digest      : Digest.t option;
  cmt_initial_env        : Env.t;
  cmt_imports            : (string * Digest.t option) list;
  cmt_interface_digest   : Digest.t option;
  cmt_use_summaries      : bool;
}
